import unittestfrom io import BytesIOfrom typing import BinaryIOimport utils# noinspection SpellCheckingInspectionclass MD5Hashes:    test_image = '9b6732d89077a0fcdde0d5fd529e2617'    uwu_string = '1b761a9f2db00bdccfaccdec050cc732'    empty = 'd41d8cd98f00b204e9800998ecf8427e'class TestReqUtil(unittest.TestCase):    test_image_url = 'https://i.imgur.com/CEePtTD.jpg'    test_image_target_path = '/tmp/requtil_unittest.jpg'    def test_md5Stream(self):        stream: BinaryIO = BytesIO(b"UwU")        md5_hash = utils.md5Stream(stream)        self.assertEqual(md5_hash, MD5Hashes.uwu_string)    def test_md5File(self):        md5_hash = utils.md5File('/dev/null')        self.assertEqual(md5_hash, MD5Hashes.empty)    def test_streamResource(self):        stream: BinaryIO = BytesIO()        utils.streamResource(self.test_image_url, stream)  # copy image to stream object        stream.seek(0, 0)  # seek to start of file        md5_hash = utils.md5Stream(stream)  # MD5 and check        self.assertEqual(MD5Hashes.test_image, md5_hash)    def test_dl_file(self):        """ Download test file, then check that it wasn't corrupted. """        utils.dl_file(self.test_image_url, self.test_image_target_path)        md5_hash = utils.md5File(self.test_image_target_path)        self.assertEqual(MD5Hashes.test_image, md5_hash)if __name__ == '__main__':    unittest.main()